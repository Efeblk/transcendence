version: '3.8'

services:
  user_db:
    image: postgres:13
    environment:
      POSTGRES_USER: postgres_user
      POSTGRES_PASSWORD: postgres_password
      POSTGRES_DB: user_db
    volumes:
      - user_db_data:/var/lib/postgresql/data

  user_service:
    build: ./user_service
    command: python manage.py runserver 0.0.0.0:8001
    volumes:
      - ./user_service:/app
    ports:
      - "8001:8001"
    depends_on:
      - user_db
    environment:
      DATABASE_URL: postgres://postgres_user:postgres_password@user_db:5432/user_db

  # PostgreSQL Database Service
  db:
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: game_db
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django (Backend) Service
  game:
    build: ./backend
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://postgres:password@db:5432/game_db
    entrypoint: /app/entrypoint.sh  # This will trigger the entrypoint script

  # Nginx Service (Merged with Frontend)
  nginx:
    build:
      context: .  # Make sure this context is set correctly where your nginx.conf is located
      dockerfile: ./nginx/Dockerfile
    ports:
      - "80:80"
    depends_on:
      - game
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf  # Ensure the correct config is mounted
      - ./backend/staticfiles:/usr/share/nginx/html/staticfiles

volumes:
  user_db_data:
  pgdata:
