version: '3.8'

services:
  user_db:
    image: postgres:13
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${USER_POSTGRESQL_USER}
      POSTGRES_PASSWORD: ${USER_POSTGRESQL_PASS}
      POSTGRES_DB: ${USER_POSTGRESQL_DB_NAME}
    networks:
      - app-network
    volumes:
      - user_db_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${USER_POSTGRESQL_USER} -d ${USER_POSTGRESQL_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  # PostgreSQL Database Service
  game_db:
    image: postgres:13
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${GAME_POSTGRESQL_USER}
      POSTGRES_PASSWORD: ${GAME_POSTGRESQL_PASS}
      POSTGRES_DB: ${GAME_POSTGRESQL_DB_NAME}
    volumes:
      - game_db:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${GAME_POSTGRESQL_USER} -d ${GAME_POSTGRESQL_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  user_service:
    build: ./user_service
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./user_service:/app2
    ports:
      - "8001:8000"
    depends_on:
      user_db:
        condition: service_healthy
    networks:
      - app-network
    env_file:
      - .env
    environment:
      DATABASE_URL: ${USER_SERVICE_DATABASE_URL}
    entrypoint: /app2/entrypoint.sh  # This will trigger the entrypoint script
    
  # Django (Backend) Service
  game_service:
    build: ./game_service
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./game_service:/app
    ports:
      - "8000:8000"
    networks:
      - app-network
    depends_on:
      game_db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      DATABASE_URL: ${GAME_SERVICE_DATABASE_URL}
    entrypoint: /app/entrypoint.sh  # This will trigger the entrypoint script

  # Nginx Service (Merged with Frontend)
  nginx:
    build:
      context: .  # Make sure this context is set correctly where your nginx.conf is located
      dockerfile: ./nginx/Dockerfile
    ports:
      - "80:80"
    depends_on:
      - game_service
    networks:
      - app-network
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf  # Ensure the correct config is mounted
      - ./game_service/staticfiles:/usr/share/nginx/html/staticfiles
      - ./user_service/media:/usr/share/nginx/html/media

volumes:
  user_db_data:
  game_db:

networks:
  app-network:
    driver: bridge
